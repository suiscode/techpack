// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  male
  female
}

model User {
  name          String?
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  cv            CV?       @relation(fields: [cvId], references: [id])
  cvId          String?   @db.ObjectId
}

model CV {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  // Example fields:
  about            String?
  education        String?
  experience       String?
  skills           String[]
  firstName        String?
  lastName         String?
  registerID       String?   @unique
  gender           Gender?
  bDay             DateTime?
  phoneNumber      String?
  email            String?   @unique
  address          String?
  career           String?
  salaryExpectency Int?
  workDuration     String?
  // Any other fields relevant to the CV
  User             User[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
